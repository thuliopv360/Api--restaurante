// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  country   String
  state     String
  cities    String
  cep       Int
  district  String
  street    String
  number    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  favorites Favorite[] // relacionameto de muitos para muitos

  orders Order[]

  @@map("user")
}

model Product {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  ingredient  String
  price       Float
  image       String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull) //relacionamento muitos para um
  categoryId String?   @map("category_id") //relacionamento muitos para um

  favorites Favorite[] // relacionameto de muitos para muitos

  orders OrderToProduct[]

  @@map("products")
}

model Table {
  id        String   @id @default(uuid())
  number    Int      @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  orders Order[]

  @@map("table")
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  products Product[] // relacionamento um para muitos

  @@map("category")
}

model Favorite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  product     Product @relation(fields: [productName], references: [name], onDelete: Cascade)
  productName String  @map("product_name")

  @@unique([userId, productName])
  @@map("favorite")
}

model Order {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  table       Table? @relation(fields: [tableNumber], references: [number], onDelete: SetNull)
  tableNumber Int?   @map("table_number")


  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String? @map("user_id")

  products OrderToProduct[]

  @@map("order")
}

model OrderToProduct {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String? @map("product_id")

  order Order? @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId String? @map("order_id")

  quantity Int

  @@map("order_to_product")
}
